Write a C program to implement Stack operations such as PUSH, 
POP and PEEK
#include <stdio.h>
#define MAX_SIZE 100
// Stack structure
struct Stack {
    int arr[MAX_SIZE];
    int top;
};
// Function to initialize the stack
void initStack(struct Stack* stack) {
    stack->top = -1;
}
// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}
// Function to check if the stack is full
int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int data) {
    if (isFull(stack)) {
        printf("Stack Overflow. Cannot push element %d.\n", data);
        return;
    }

    stack->top++;
    stack->arr[stack->top] = data;
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow. Cannot pop element from an empty stack.\n");
        return -1;
    }

    int data = stack->arr[stack->top];
    stack->top--;
    return data;
}
// Function to peek at the top element of the stack
int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot peek.\n");
        return -1;
    }
    return stack->arr[stack->top];
}
int main() {
    struct Stack stack;
    initStack(&stack);
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    printf("Top element: %d\n", peek(&stack));
    printf("Popped element: %d\n", pop(&stack));
    printf("Popped element: %d\n", pop(&stack));
    printf("Popped element: %d\n", pop(&stack));
    printf("Popped element: %d\n", pop(&stack)); // Trying to pop from an empty stack

    return 0;
}
output:
Top element: 30
Popped element: 30
Popped element: 20
Popped element: 10
Stack Underflow. Cannot pop element from an empty stack.

