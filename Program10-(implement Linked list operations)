Write a C program to implement Linked list operations
#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a new node at the beginning
struct Node* insertAtBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = head;
    return newNode;
}
// Function to delete the first occurrence of a node with the given value
struct Node* deleteNode(struct Node* head, int key) {
    if (head == NULL) {
        printf("Linked list is empty. Deletion failed.\n");
        return NULL;
    }

    if (head->data == key) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
        return head;
    }

    struct Node* current = head;
    while (current->next != NULL) {
        if (current->next->data == key) {
            struct Node* temp = current->next;
            current->next = temp->next;
            free(temp);
            return head;
        }
        current = current->next;
    }
    printf("Key not found. Deletion failed.\n");
    return head;
}
// Function to display the elements of the linked list
void display(struct Node* head) {
    struct Node* current = head;
    printf("Linked List: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
}
    printf("\n");
}

// Function to free the memory occupied by the linked list
void freeLinkedList(struct Node* head) {
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}
int main() {
    struct Node* head = NULL;
// Insert elements at the beginning of the linked list
    head = insertAtBeginning(head, 30);
    head = insertAtBeginning(head, 20);
    head = insertAtBeginning(head, 10);
    // Display the linked list
    display(head);
    // Delete a node with the value 20 from the linked list
    head = deleteNode(head, 20);
    // Display the linked list after deletion
    display(head);
    // Free the memory occupied by the linked list
    freeLinkedList(head);
    return 0;
}
